#!/usr/bin/env python3

# Description: Checks status of all Git repos found in specific directory, or
# all Git repos found one sub-level down. State of repo is indicated through
# colors green (clean), yellow (unpushed) and red (dirty). Characters * (dirty)
# and + (unpushed) are printed next to branch names for colorless operation.
#
# Example:
#
#     /Users/GLEG/Projects:
#     Ansiblebot      master
#     Dotfiles        master*
#     Project-Assets  master
#     Pyttipanna      master+
#     ...
#
# Dependencies:
#
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/colors.py
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/pytt.py
#
# Usage: gitst
#        gitst --help
#
# Author: GÃ¶ran Gustafsson <gustafsson.g@gmail.com>
# License: BSD 3-Clause

import argparse
import os
import subprocess
import sys

from collections import namedtuple

from lib import colors
from lib import pytt


def setup_args() -> argparse.Namespace:
    """Configure argument parsing."""

    parser = argparse.ArgumentParser(
        description="Check status of Git repos in directory."
    )
    parser.add_argument(
        "-p", "--path",
        default=os.path.expanduser("~/Projects"),
        help="directory to search (default: ~/Projects)"
    )
    parser.add_argument(
        "-s", "--sub-level",
        action="store_true",
        help="search one sub-level down (default: off)"
    )
    return parser.parse_args()


def git_status(repo_dir: os.DirEntry, sub_level: bool = False) -> tuple:
    """Check Git repo status.

    Retrieve information about current branch and state (dirty/unpushed).

    Arguments:
        repo_dir: os.DirEntry containing Git repo directory.
        sub_level: bool that sets if name should contain parent directory.

    Returns:
        namedtuple containing Git repo status.
        repo(name='x', branch='y', dirty=False, unpushed=False)
    """

    if sub_level:
        path = str(repo_dir.path).split(os.sep)
        name = f"{path[-2]}{os.sep}{path[-1]}"
    else:
        name = repo_dir.name

    proc = subprocess.run(
        ["git", "-C", repo_dir.path, "branch", "--show-current"],
        capture_output=True,
        check=True
    )
    if proc.stdout:
        branch = proc.stdout.decode().strip()
    else:
        # Detached HEAD state has no branch name.
        branch = "?"

    proc = subprocess.run(
        ["git", "-C", repo_dir.path, "status", "--porcelain"],
        capture_output=True,
        check=True
    )
    dirty = bool(proc.stdout)

    if not dirty:
        proc = subprocess.run(
            ["git", "-C", repo_dir.path, "log", "-n", "1", "@{upstream}.."],
            capture_output=True,
            # Detached HEAD state leads to exit status 128.
            check=False
        )
        unpushed = bool(proc.stdout)
    else:
        unpushed = False

    repo = namedtuple("repo", "name branch dirty unpushed")
    return repo(name=name, branch=branch, dirty=dirty, unpushed=unpushed)


def git_table(term: colors.Codes, repos: list):
    """Print summary table of Git repos.

    State of repo is indicated through colors green (clean), yellow (unpushed)
    and red (dirty). Characters * (dirty) and + (unpushed) are printed next to
    branch names for colorless operation.

    Arguments:
        term: colors.Codes containing data from colors library.
        repos: list containing dict's with Git repo states.
    """

    column = len(max((repo.name for repo in repos), key=len)) + 2

    for repo in repos:
        print(f"{repo.name:<{column}}", end="")
        if repo.dirty:
            print(f"{term.fg.bright_red}{repo.branch}*{term.attr.reset}")
        elif repo.unpushed:
            print(f"{term.fg.bright_yellow}{repo.branch}+{term.attr.reset}")
        else:
            print(f"{term.fg.bright_green}{repo.branch}{term.attr.reset}")


def main():
    args = setup_args()
    term = colors.init_auto()

    if not os.path.isdir(args.path):
        print(f"Directory '{args.path}' not found! Exiting...")
        sys.exit(1)

    print(f"{term.fg.bright_cyan}{args.path}:{term.attr.reset}")

    repos = pytt.git_find(args.path, args.sub_level)
    if repos:
        states = [git_status(repo, args.sub_level) for repo in repos]
        git_table(term, states)
    else:
        print("No Git repos found...")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
