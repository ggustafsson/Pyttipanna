#!/usr/bin/env python3

# Description: Checks status of all Git repos found in specific directory, or
# all Git repos found one sub-level down. State of repo is indicated through
# colors green (clean), yellow (unpushed) and red (dirty). Characters * (dirty)
# and + (unpushed) are printed next to branch names for colorless operation.
#
# Example:
#
#     Projects:
#     Ansiblebot      master
#     Dotfiles        master*
#     Project-Assets  master
#     ...
#
# Dependencies: termcolors
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/termcolors.py
#
# Usage: gitst
#
# Author: GÃ¶ran Gustafsson <gustafsson.g@gmail.com>
# License: BSD 3-Clause

import argparse
import os
import subprocess
import sys

from lib.termcolors import Attr, Fg


def setup_args() -> argparse.Namespace:
    """Configure argument parsing."""

    parser = argparse.ArgumentParser(
        description="Check status of Git repos in directory."
    )
    parser.add_argument(
        "-p", "--path",
        default=os.path.expanduser("~/Projects"),
        help="directory to search (default: ~/Projects)"
    )
    parser.add_argument(
        "-s", "--sub-level",
        action="store_true",
        help="search one sub-level down (default: off)"
    )
    return parser.parse_args()


def status(dir_: os.DirEntry, sub: bool = False) -> dict:
    """Check Git repo status.

    Retrieve information about current branch and state (dirty/unpushed).

    Arguments:
        dir_: os.DirEntry containing Git repo directory.
        sub: bool that sets if name should contain parent directory.

    Returns:
        dict containing Git repo status.
        {'name': 'x', 'branch': 'y', 'dirty': False, 'unpushed': False}
    """

    if sub:
        path = str(dir_.path).split(os.sep)
        name = f"{path[-2]}/{path[-1]}"
    else:
        name = dir_.name

    proc = subprocess.run(
        ["git", "-C", dir_.path, "branch", "--show-current"],
        capture_output=True,
        check=False
    )
    branch = proc.stdout.decode().strip()

    proc = subprocess.run(
        ["git", "-C", dir_.path, "status", "--porcelain"],
        capture_output=True,
        check=False
    )
    dirty = bool(len(proc.stdout) > 0)

    if not dirty:
        proc = subprocess.run(
            ["git", "-C", dir_.path, "log", "@{upstream}.."],
            capture_output=True,
            check=False
        )
        unpushed = bool(len(proc.stdout) > 0)
    else:
        unpushed = False

    return {"name": name, "branch": branch, "dirty": dirty,
            "unpushed": unpushed}


def summary(repos: list):
    """Print summary table of Git repos.

    State of repo is indicated through colors green (clean), yellow (unpushed)
    and red (dirty). Characters * (dirty) and + (unpushed) are printed next to
    branch names for colorless operation.

    Arguments:
        repos: list containing dict's with Git repo states.
    """

    column = len(max((repo["name"] for repo in repos), key=len)) + 2

    for repo in (sorted(repos, key=lambda d: d["name"])):
        print(f"{repo['name']:<{column}}", end="")
        if repo["dirty"]:
            print(f"{Fg.BrightRed}{repo['branch']}*{Attr.Reset}")
        elif repo["unpushed"]:
            print(f"{Fg.BrightYellow}{repo['branch']}+{Attr.Reset}")
        else:
            print(f"{Fg.BrightGreen}{repo['branch']}{Attr.Reset}")


def main():
    args = setup_args()

    dir_path = args.path
    dir_name = os.path.basename(os.path.abspath(dir_path))
    repos = []

    if not os.path.isdir(dir_path):
        print(f"Directory '{dir_path}' not found! Exiting...")
        sys.exit(1)

    if args.sub_level:
        for dir_ in os.scandir(dir_path):
            if not os.path.isdir(dir_.path):
                continue

            for subdir in os.scandir(dir_.path):
                if os.path.isdir(f"{subdir.path}/.git"):
                    repos.append(status(subdir, sub=True))
    else:
        for dir_ in os.scandir(dir_path):
            if os.path.isdir(f"{dir_.path}/.git"):
                repos.append(status(dir_))

    print(f"{Fg.BrightCyan}{dir_name}:{Attr.Reset}")
    if len(repos) > 0:
        summary(repos)
    else:
        print("No Git repos found...")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print()
