#!/usr/bin/env python3

# Description: Updates all Git repos found in specific directory, or all Git
# repos found one sub-level down. Fetching is done asynchronously to avoid risk
# of falling asleep hence order is seemingly random.
#
# Example:
#
#     Updating Git repos under '/Users/GLEG/Projects'...
#
#     Ansiblebot:
#     Already up to date.
#
#     Pyttipanna:
#     error: cannot pull with rebase: You have unstaged changes.
#     error: please commit or stash them.
#
#     ...
#
# Dependencies:
#
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/colors.py
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/pytt.py
#
# Usage: gitpl
#        gitpl --help
#
# Author: GÃ¶ran Gustafsson <gustafsson.g@gmail.com>
# License: BSD 3-Clause

import argparse
import asyncio
import os
import sys

from lib import colors
from lib import pytt


def setup_args() -> argparse.Namespace:
    """Configure argument parsing."""

    parser = argparse.ArgumentParser(
        description="Update Git repos under directory."
    )
    parser.add_argument(
        "-p", "--path",
        default=os.path.expanduser("~/Projects"),
        help="directory to search (default: ~/Projects)"
    )
    parser.add_argument(
        "-s", "--sub-level",
        action="store_true",
        help="search one sub-level down (default: off)"
    )
    return parser.parse_args()


async def git_pull(
    term: colors.Codes,
    repo_dir: os.DirEntry,
    sub_level: bool = False
):
    """Fetch Git repo updates.

    Executes "git pull" and prints command output.

    Arguments:
        term: colors.Codes containing data from colors module.
        repo_dir: os.DirEntry containing Git repo directory.
        sub_level: bool that sets if name should contain parent directory.
    """

    if sub_level:
        path = str(repo_dir.path).split(os.sep)
        name = f"{path[-2]}{os.sep}{path[-1]}"
    else:
        name = repo_dir.name

    proc = await asyncio.create_subprocess_shell(
        f"git -C '{repo_dir.path}' pull",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await proc.communicate()

    print(f"\n{term.fg.bright_cyan}{name}:{term.attr.reset}")
    if len(stdout) > 1:
        print(stdout.decode().strip())
    if len(stderr) > 1:
        print(stderr.decode().strip())


async def main():
    args = setup_args()
    term = colors.init_auto()

    if not os.path.isdir(args.path):
        print(f"Directory '{args.path}' not found! Exiting...")
        sys.exit(1)

    print(f"Updating Git repos under '{args.path}'...")

    repos = pytt.git_find(args.path, args.sub_level)
    if len(repos) > 0:
        tasks = [git_pull(term, repo, args.sub_level) for repo in repos]
        await asyncio.gather(*tasks)
    else:
        print("No Git repos found...")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print()
