#!/usr/bin/env python3

# Description: Updates all Git repos found in specific directory, or all Git
# repos found one sub-level down. Fetching is done asynchronously to avoid risk
# of falling asleep hence output order is seemingly random.
#
# Example:
#
#     Updating Git repos under '/Users/GLEG/Projects'...
#
#     Ansiblebot:
#     Already up to date.
#
#     Pyttipanna:
#     remote: Enumerating objects: 5, done.
#     remote: Counting objects: 100% (5/5), done.
#     remote: Compressing objects: 100% (2/2), done.
#     remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
#     Unpacking objects: 100% (3/3), 663 bytes | 331.00 KiB/s, done.
#     ...
#
# Dependencies:
#
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/colors.py
#     https://github.com/ggustafsson/Pyttipanna/blob/master/src/lib/pytt.py
#
# Usage: gitpl
#        gitpl --help
#
# Author: GÃ¶ran Gustafsson <gustafsson.g@gmail.com>
# License: BSD 3-Clause

import argparse
import asyncio
import os
import sys

from lib import colors
from lib import pytt


def setup_args() -> argparse.Namespace:
    """Configure argument parsing."""

    parser = argparse.ArgumentParser(
        description="Update Git repos under directory."
    )
    parser.add_argument(
        "-p", "--path",
        default=os.path.expanduser("~/Projects"),
        help="directory to search (default: ~/Projects)"
    )
    parser.add_argument(
        "-s", "--sub-level",
        action="store_true",
        help="search one sub-level down (default: off)"
    )
    return parser.parse_args()


async def git_pull(repo_dir: os.DirEntry, sub_level: bool):
    """Fetch Git repo changes.

    Executes "git pull" and prints command output.

    Arguments:
        repo_dir: os.DirEntry containing Git repo directory.
        sub_level: bool that sets if name should contain parent directory.
    """

    if sub_level:
        path = str(repo_dir.path).split(os.sep)
        name = f"{path[-2]}{os.sep}{path[-1]}"
    else:
        name = repo_dir.name

    proc = await asyncio.create_subprocess_exec(
        "git", "-C", repo_dir.path, "pull",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await proc.communicate()

    print(f"\n{colors.fg.bright_cyan}{name}:{colors.attr.reset}")
    if stdout:
        print(stdout.decode().rstrip())
    if stderr:
        print(stderr.decode().rstrip())


async def main():
    args = setup_args()

    if not os.path.isdir(args.path):
        print(f"Directory '{args.path}' not found! Exiting...")
        sys.exit(1)

    print(f"Updating Git repos under '{args.path}'...")

    repos = pytt.git_find(args.path, args.sub_level)
    if repos:
        tasks = [git_pull(repo, args.sub_level) for repo in repos]
        await asyncio.gather(*tasks)
    else:
        print("No Git repos found...")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print()
